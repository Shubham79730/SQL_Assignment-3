-- 1. **Rank the customers based on the total amount they've spent on rentals.**
	  SELECT
	c.customer_id,
	CONCAT(first_name, ' ', last_name) AS customer_name,
    SUM(amount) AS total_amount_spent,
    RANK() OVER (ORDER BY SUM(amount) DESC) AS customer_rank
FROM
    customer c
JOIN
    payment p ON c.customer_id = p.customer_id
GROUP BY
    customer_id, first_name, last_name
ORDER BY
    total_amount_spent DESC;
	    
-- 2. **Calculate the cumulative revenue generated by each film over time.**
      SELECT
    f.film_id,
    f.title,
    p.payment_date,
    SUM(p.amount) OVER (PARTITION BY f.film_id ORDER BY p.payment_date) AS cumulative_revenue
FROM
    film f
JOIN
    inventory i ON f.film_id = i.film_id
JOIN
    rental r ON i.inventory_id = r.inventory_id
JOIN
    payment p ON r.rental_id = p.rental_id
ORDER BY
    f.film_id, p.payment_date;
    
-- 3. **Determine the average rental duration for each film, considering films with similar lengths.**
      SELECT
    film_id,
    title,
    rental_duration,
    AVG(rental_duration) OVER (PARTITION BY length) AS avg_rental_duration
FROM
    film;
    
-- 4. **Identify the top 3 films in each category based on their rental counts.**
      SELECT
    fc.category_id,
    f.film_id,
    f.title,
    COUNT(r.rental_id) AS rental_count,
    RANK() OVER (PARTITION BY fc.category_id ORDER BY COUNT(r.rental_id) DESC) AS film_rank
FROM
    film_category fc
JOIN
    film f ON fc.film_id = f.film_id
JOIN
    inventory i ON f.film_id = i.film_id
JOIN
    rental r ON i.inventory_id = r.inventory_id
GROUP BY
    fc.category_id, f.film_id, f.title
HAVING
    film_rank <= 3
ORDER BY
    fc.category_id, film_rank;
    
-- 5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.**
	  SELECT
	c.customer_id,
    CONCAT(first_name, ' ', last_name) AS customer_name,
    COUNT(r.rental_id) AS rental_count,
    COUNT(r.rental_id) - AVG(COUNT(r.rental_id)) OVER () AS rental_count_difference
FROM
    customer c
JOIN
    rental r ON c.customer_id = r.customer_id
GROUP BY
    customer_id, first_name, last_name;
    
-- 6. **Find the monthly revenue trend for the entire rental store over time.**
      SELECT
    DATE_FORMAT(payment_date, '%Y-%m') AS month,
    SUM(amount) OVER (ORDER BY DATE_FORMAT(payment_date, '%Y-%m')) AS monthly_revenue
FROM
    payment
GROUP BY
    month
ORDER BY
    month;
    
-- 7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**
      SELECT
    customer_id,
    total_spending
FROM (
    SELECT
        customer_id,
        SUM(amount) AS total_spending,
        PERCENT_RANK() OVER (ORDER BY SUM(amount) DESC) AS spending_percent_rank
    FROM
        payment
    GROUP BY
        customer_id
) AS CustomerTotalSpending
WHERE
    spending_percent_rank <= 0.2;
    
-- 8. **Calculate the running total of rentals per category, ordered by rental count.**
      SELECT
    category_id,
    f.film_id,
    title,
    COUNT(r.rental_id) AS rental_count,
    SUM(COUNT(r.rental_id)) OVER (PARTITION BY fc.category_id ORDER BY COUNT(r.rental_id) DESC) AS running_total_rentals
FROM
    film_category fc
JOIN
    film f ON fc.film_id = f.film_id
JOIN
    inventory i ON f.film_id = i.film_id
JOIN
    rental r ON i.inventory_id = r.inventory_id
GROUP BY
    category_id, film_id, title
ORDER BY
    category_id, rental_count DESC;
    
-- 9. **Find the films that have been rented less than the average rental count for their respective categories.**
	  SELECT
    fc.category_id,
    f.film_id,
    f.title,
    COUNT(r.rental_id) AS rental_count,
    AVG(COUNT(r.rental_id)) OVER (PARTITION BY fc.category_id) AS avg_rental_count
FROM
    film_category fc
JOIN
    film f ON fc.film_id = f.film_id
JOIN
    inventory i ON f.film_id = i.film_id
JOIN
    rental r ON i.inventory_id = r.inventory_id
GROUP BY
    fc.category_id, f.film_id, f.title
HAVING
    rental_count < avg_rental_count;
    
-- 10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**
      SELECT
    DATE_FORMAT(payment_date, '%Y-%m') AS month,
    SUM(amount) AS monthly_revenue
FROM
    payment
GROUP BY
    month
ORDER BY
    monthly_revenue DESC
LIMIT 5;